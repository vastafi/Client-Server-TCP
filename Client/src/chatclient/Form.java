package chatclient;

import java.awt.event.MouseEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author User
 */
public class Form extends javax.swing.JFrame {

    private MouseEvent getPositionEvent;

    private static DataInputStream dataInputStream;
    private static DataOutputStream dataOutputStream;

    private boolean running;

    private final String nickname;
    private int port;

    private javax.swing.JList<String> clientList;
    private static javax.swing.JTextPane jTextPaneChat;
    private javax.swing.JTextField messageTextField;

    DefaultListModel listModel = new DefaultListModel();

    /**
     * Creates new form ClientForm
     */
    public Form(Socket clientSocket, String name, int port) {
        initComponents();

        this.nickname = name;
        this.port = port;

        try {
            dataInputStream = new DataInputStream(clientSocket.getInputStream());
            dataOutputStream = new DataOutputStream(clientSocket.getOutputStream());
            dataOutputStream.writeUTF("\\connect:" + name);
            addMessageToChat("\n");
            clientList.setModel(listModel);
            running = true;
            messageListener();
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
       private void initComponents() {

        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneChat = new javax.swing.JTextPane();
        javax.swing.JScrollPane jScrollPaneClientList = new javax.swing.JScrollPane();
        clientList = new javax.swing.JList<>();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JPanel jPanelDragWindow = new javax.swing.JPanel();
        javax.swing.JPanel jPanelCloseWindow = new javax.swing.JPanel();
        messageTextField = new javax.swing.JTextField();
        javax.swing.JButton sendMessageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(500, 400));
        getContentPane().setLayout(null);

        jTextPaneChat.setEditable(false);
        jTextPaneChat.setBorder(null);
        jScrollPane2.setViewportView(jTextPaneChat);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 60, 400, 270);

        jScrollPaneClientList.setViewportView(clientList);

        getContentPane().add(jScrollPaneClientList);
        jScrollPaneClientList.setBounds(410, 60, 80, 270);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 440, 600, 79);

        jPanelDragWindow.setBackground(new java.awt.Color(1, 50, 67));
        jPanelDragWindow.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelDragWindowMouseDragged(evt);
            }
        });
        jPanelDragWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelDragWindowMousePressed(evt);
            }
        });

        jPanelCloseWindow.setBackground(new java.awt.Color(228, 241, 254));
        jPanelCloseWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelCloseWindowMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCloseWindowLayout = new javax.swing.GroupLayout(jPanelCloseWindow);
        jPanelCloseWindow.setLayout(jPanelCloseWindowLayout);
        jPanelCloseWindowLayout.setHorizontalGroup(
            jPanelCloseWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 53, Short.MAX_VALUE)
        );
        jPanelCloseWindowLayout.setVerticalGroup(
            jPanelCloseWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelDragWindowLayout = new javax.swing.GroupLayout(jPanelDragWindow);
        jPanelDragWindow.setLayout(jPanelDragWindowLayout);
        jPanelDragWindowLayout.setHorizontalGroup(
            jPanelDragWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDragWindowLayout.createSequentialGroup()
                .addGap(0, 447, Short.MAX_VALUE)
                .addComponent(jPanelCloseWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelDragWindowLayout.setVerticalGroup(
            jPanelDragWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelCloseWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelDragWindow);
        jPanelDragWindow.setBounds(0, 0, 500, 50);
        getContentPane().add(messageTextField);
        messageTextField.setBounds(10, 350, 390, 20);

        sendMessageButton.setText("Send");
        sendMessageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sendMessageButtonMousePressed(evt);
            }
        });
        getContentPane().add(sendMessageButton);
        sendMessageButton.setBounds(410, 350, 80, 21);

        pack();
    }

    private void sendMessageButtonMousePressed(java.awt.event.MouseEvent evt) {
        String message = messageTextField.getText();

        try {
            if (!message.isEmpty()) {
                dataOutputStream.writeUTF(message);
                messageTextField.setText("");
            }
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jPanelCloseWindowMousePressed(java.awt.event.MouseEvent evt) {
        closeClient();
    }

    private void jPanelDragWindowMouseDragged(java.awt.event.MouseEvent evt) {
          setLocation(evt.getXOnScreen() - getPositionEvent.getX(),
                evt.getYOnScreen() - getPositionEvent.getY());
    }

    private void jPanelDragWindowMousePressed(java.awt.event.MouseEvent evt) {

        getPositionEvent = evt;
    }

    public void messageListener() {
        new Thread("Listener") {
            @Override
            public void run() {
                try {
                    while (running) {
                        String message = dataInputStream.readUTF();

                        if (!message.isEmpty()) {
                            if (!isCommand(message)) {
                                addMessageToChat(message);
                            }
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }.start();
    }

    private boolean isCommand(String message) {
        if (message.startsWith("\\connect:")) {

            String name = message.substring(message.indexOf(":") + 1);

            if (!this.nickname.equals(name)) {
                addMessageToChat("    User [" + name + "] enter to the chat.");
            }
            return true;
        } else if (message.startsWith("\\disconnect:")) {
            String name = message.substring(message.indexOf(":") + 1);
            addMessageToChat("    User [" + name + "] exit from the chat.");
            return true;
        } else if(message.startsWith("\\userlist:")) {
            String[] users = message.split(":");
            listModel.clear();
            for(int i = 1; i < users.length; i++) {
                addToList(users[i]);
            }
            return true;
        }
        return false;
    }

    private void addMessageToChat(String message) {
         jTextPaneChat.setText(jTextPaneChat.getText().concat(message + "\n"));
    }

    public void addToList(String name) {
        listModel.addElement(name);
    }

    private void closeClient() {

        try {
            running = false;
            dataOutputStream.writeUTF("\\disconnect:" + nickname);
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
          java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form(null, null, 0).setVisible(true);
            }
        });
    }
}
